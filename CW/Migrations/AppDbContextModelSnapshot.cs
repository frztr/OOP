// <auto-generated />
using System;
using Global;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CW.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Global.Automechanic", b =>
                {
                    b.Property<short>("UserId")
                        .HasColumnType("smallint")
                        .HasColumnName("user_id");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("qualification");

                    b.HasKey("UserId");

                    b.ToTable("automechanic", (string)null);
                });

            modelBuilder.Entity("Global.DocumentType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("document_type", (string)null);
                });

            modelBuilder.Entity("Global.Driver", b =>
                {
                    b.Property<short>("UserId")
                        .HasColumnType("smallint")
                        .HasColumnName("user_id");

                    b.Property<long>("DriverLicense")
                        .HasColumnType("bigint")
                        .HasColumnName("driver_license");

                    b.Property<short>("Experience")
                        .HasColumnType("smallint")
                        .HasColumnName("experience");

                    b.HasKey("UserId");

                    b.HasIndex("DriverLicense")
                        .IsUnique();

                    b.ToTable("driver", (string)null);
                });

            modelBuilder.Entity("Global.FuelMeasurementHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("MeasurementDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("measurement_date");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_id");

                    b.Property<decimal>("Volume")
                        .HasPrecision(7, 3)
                        .HasColumnType("numeric(7,3)")
                        .HasColumnName("volume");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("fuel_measurement_history", (string)null);
                });

            modelBuilder.Entity("Global.FuelType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("fuel_type", (string)null);
                });

            modelBuilder.Entity("Global.MaintenanceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("AutomechanicId")
                        .HasColumnType("smallint")
                        .HasColumnName("automechanic_id");

                    b.Property<string>("CompletedWork")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("completed_work");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<short>("MaintenanceTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("maintenance_type_id");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id");

                    b.HasIndex("AutomechanicId");

                    b.HasIndex("MaintenanceTypeId");

                    b.HasIndex("VehicleId");

                    b.ToTable("maintenance_history", (string)null);
                });

            modelBuilder.Entity("Global.MaintenanceType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("maintenance_type", (string)null);
                });

            modelBuilder.Entity("Global.Manufacturer", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("manufacturer", (string)null);
                });

            modelBuilder.Entity("Global.MileageMeasurementHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("KmCount")
                        .HasPrecision(9, 3)
                        .HasColumnType("numeric(9,3)")
                        .HasColumnName("km_count");

                    b.Property<DateTime>("MeasurementDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("measurement_date");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("mileage_measurement_history", (string)null);
                });

            modelBuilder.Entity("Global.OilType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<short>("FuelTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("fuel_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("oil_type", (string)null);
                });

            modelBuilder.Entity("Global.PlannedMaintenanceSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("MaintenanceTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("maintenance_type_id");

                    b.Property<DateTime>("PlannedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("planned_date");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceTypeId");

                    b.HasIndex("VehicleId");

                    b.ToTable("planned_maintenance_schedule", (string)null);
                });

            modelBuilder.Entity("Global.RefuelingHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datetime");

                    b.Property<short>("DriverId")
                        .HasColumnType("smallint")
                        .HasColumnName("driver_id");

                    b.Property<long>("FuelStationTinNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("fuelstation_tin_number");

                    b.Property<short>("OilTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("oil_type_id");

                    b.Property<decimal>("Price")
                        .HasPrecision(9, 2)
                        .HasColumnType("numeric(9,2)")
                        .HasColumnName("price");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_id");

                    b.Property<decimal>("Volume")
                        .HasPrecision(7, 3)
                        .HasColumnType("numeric(7,3)")
                        .HasColumnName("volume");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("OilTypeId");

                    b.HasIndex("VehicleId");

                    b.ToTable("refueling_history", (string)null);
                });

            modelBuilder.Entity("Global.RepairConsumedSparePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PartCount")
                        .HasColumnType("integer")
                        .HasColumnName("part_count");

                    b.Property<int>("RepairId")
                        .HasColumnType("integer")
                        .HasColumnName("repair_id");

                    b.Property<int>("SparePartId")
                        .HasColumnType("integer")
                        .HasColumnName("spare_part_id");

                    b.HasKey("Id");

                    b.HasIndex("RepairId");

                    b.HasIndex("SparePartId");

                    b.ToTable("repair_consumed_spare_part", (string)null);
                });

            modelBuilder.Entity("Global.RepairHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short?>("AutomechanicId")
                        .HasColumnType("smallint")
                        .HasColumnName("automechanic_id");

                    b.Property<string>("CompletedWork")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("completed_work");

                    b.Property<DateTime>("DateTimeBegin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datetime_begin");

                    b.Property<DateTime>("DateTimeEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datetime_end");

                    b.Property<decimal?>("Price")
                        .HasPrecision(9, 2)
                        .HasColumnType("numeric(9,2)")
                        .HasColumnName("price");

                    b.Property<long?>("ServiceStationTinNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("servicestation_tin_number");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id");

                    b.HasIndex("AutomechanicId");

                    b.HasIndex("VehicleId");

                    b.ToTable("repair_history", (string)null);
                });

            modelBuilder.Entity("Global.Role", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("Global.SparePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountLeft")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("count_left");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("spare_part", (string)null);
                });

            modelBuilder.Entity("Global.User", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<string>("Fio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("fio");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("login");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("password_hash");

                    b.Property<short>("RoleId")
                        .HasColumnType("smallint")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Global.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("plate_number");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registration_date");

                    b.Property<short>("ReleaseYear")
                        .HasColumnType("smallint")
                        .HasColumnName("release_year");

                    b.Property<short>("StatusId")
                        .HasColumnType("smallint")
                        .HasColumnName("status_id");

                    b.Property<int>("VehicleModelId")
                        .HasColumnType("integer")
                        .HasColumnName("vehiclemodel_id");

                    b.Property<string>("VinNumber")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)")
                        .HasColumnName("vin_number");

                    b.HasKey("Id");

                    b.HasIndex("PlateNumber")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.HasIndex("VehicleModelId");

                    b.HasIndex("VinNumber")
                        .IsUnique();

                    b.ToTable("vehicle", (string)null);
                });

            modelBuilder.Entity("Global.VehicleCategory", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("vehicle_category", (string)null);
                });

            modelBuilder.Entity("Global.VehicleDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("DocTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("doctype_id");

                    b.Property<string>("Src")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("src");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id");

                    b.HasIndex("DocTypeId");

                    b.HasIndex("Src")
                        .IsUnique();

                    b.HasIndex("VehicleId");

                    b.ToTable("vehicle_document", (string)null);
                });

            modelBuilder.Entity("Global.VehicleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<short>("FuelTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("fuel_type_id");

                    b.Property<int>("LoadCapacity")
                        .HasColumnType("integer")
                        .HasColumnName("load_capacity");

                    b.Property<short>("ManufacturerId")
                        .HasColumnType("smallint")
                        .HasColumnName("manufacturer_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("name");

                    b.Property<short>("Power")
                        .HasColumnType("smallint")
                        .HasColumnName("power");

                    b.Property<short>("VehicleCategoryId")
                        .HasColumnType("smallint")
                        .HasColumnName("vehicle_category_id");

                    b.HasKey("Id");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("VehicleCategoryId");

                    b.ToTable("vehicle_model", (string)null);
                });

            modelBuilder.Entity("Global.VehiclePhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Src")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("src");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id");

                    b.HasIndex("Src")
                        .IsUnique();

                    b.HasIndex("VehicleId");

                    b.ToTable("vehicle_photo", (string)null);
                });

            modelBuilder.Entity("Global.VehicleStatus", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("vehicle_status", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Global.Automechanic", b =>
                {
                    b.HasOne("Global.User", "User")
                        .WithOne("Automechanic")
                        .HasForeignKey("Global.Automechanic", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Global.Driver", b =>
                {
                    b.HasOne("Global.User", "User")
                        .WithOne("Driver")
                        .HasForeignKey("Global.Driver", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Global.FuelMeasurementHistory", b =>
                {
                    b.HasOne("Global.Vehicle", "Vehicle")
                        .WithMany("FuelMeasurements")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Global.MaintenanceHistory", b =>
                {
                    b.HasOne("Global.Automechanic", "Automechanic")
                        .WithMany("MaintenanceHistories")
                        .HasForeignKey("AutomechanicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Global.MaintenanceType", "MaintenanceType")
                        .WithMany("MaintenanceHistories")
                        .HasForeignKey("MaintenanceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Global.Vehicle", "Vehicle")
                        .WithMany("Maintenances")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Automechanic");

                    b.Navigation("MaintenanceType");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Global.MileageMeasurementHistory", b =>
                {
                    b.HasOne("Global.Vehicle", "Vehicle")
                        .WithMany("MileageMeasurements")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Global.OilType", b =>
                {
                    b.HasOne("Global.FuelType", "FuelType")
                        .WithMany("OilTypes")
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FuelType");
                });

            modelBuilder.Entity("Global.PlannedMaintenanceSchedule", b =>
                {
                    b.HasOne("Global.MaintenanceType", "MaintenanceType")
                        .WithMany("PlannedMaintenances")
                        .HasForeignKey("MaintenanceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Global.Vehicle", "Vehicle")
                        .WithMany("PlannedMaintenances")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaintenanceType");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Global.RefuelingHistory", b =>
                {
                    b.HasOne("Global.Driver", "Driver")
                        .WithMany("RefuelingHistories")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Global.OilType", "OilType")
                        .WithMany("Refuelings")
                        .HasForeignKey("OilTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Global.Vehicle", "Vehicle")
                        .WithMany("Refuelings")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("OilType");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Global.RepairConsumedSparePart", b =>
                {
                    b.HasOne("Global.RepairHistory", "Repair")
                        .WithMany("ConsumedSpareParts")
                        .HasForeignKey("RepairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Global.SparePart", "SparePart")
                        .WithMany("RepairConsumptions")
                        .HasForeignKey("SparePartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Repair");

                    b.Navigation("SparePart");
                });

            modelBuilder.Entity("Global.RepairHistory", b =>
                {
                    b.HasOne("Global.Automechanic", "Automechanic")
                        .WithMany("RepairHistories")
                        .HasForeignKey("AutomechanicId");

                    b.HasOne("Global.Vehicle", "Vehicle")
                        .WithMany("Repairs")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Automechanic");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Global.User", b =>
                {
                    b.HasOne("Global.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Global.Vehicle", b =>
                {
                    b.HasOne("Global.VehicleStatus", "Status")
                        .WithMany("Vehicles")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Global.VehicleModel", "VehicleModel")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("VehicleModel");
                });

            modelBuilder.Entity("Global.VehicleDocument", b =>
                {
                    b.HasOne("Global.DocumentType", "DocumentType")
                        .WithMany("VehicleDocuments")
                        .HasForeignKey("DocTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Global.Vehicle", "Vehicle")
                        .WithMany("Documents")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentType");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Global.VehicleModel", b =>
                {
                    b.HasOne("Global.FuelType", "FuelType")
                        .WithMany("VehicleModels")
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Global.Manufacturer", "Manufacturer")
                        .WithMany("VehicleModels")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Global.VehicleCategory", "VehicleCategory")
                        .WithMany("VehicleModels")
                        .HasForeignKey("VehicleCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FuelType");

                    b.Navigation("Manufacturer");

                    b.Navigation("VehicleCategory");
                });

            modelBuilder.Entity("Global.VehiclePhoto", b =>
                {
                    b.HasOne("Global.Vehicle", "Vehicle")
                        .WithMany("Photos")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Global.Automechanic", b =>
                {
                    b.Navigation("MaintenanceHistories");

                    b.Navigation("RepairHistories");
                });

            modelBuilder.Entity("Global.DocumentType", b =>
                {
                    b.Navigation("VehicleDocuments");
                });

            modelBuilder.Entity("Global.Driver", b =>
                {
                    b.Navigation("RefuelingHistories");
                });

            modelBuilder.Entity("Global.FuelType", b =>
                {
                    b.Navigation("OilTypes");

                    b.Navigation("VehicleModels");
                });

            modelBuilder.Entity("Global.MaintenanceType", b =>
                {
                    b.Navigation("MaintenanceHistories");

                    b.Navigation("PlannedMaintenances");
                });

            modelBuilder.Entity("Global.Manufacturer", b =>
                {
                    b.Navigation("VehicleModels");
                });

            modelBuilder.Entity("Global.OilType", b =>
                {
                    b.Navigation("Refuelings");
                });

            modelBuilder.Entity("Global.RepairHistory", b =>
                {
                    b.Navigation("ConsumedSpareParts");
                });

            modelBuilder.Entity("Global.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Global.SparePart", b =>
                {
                    b.Navigation("RepairConsumptions");
                });

            modelBuilder.Entity("Global.User", b =>
                {
                    b.Navigation("Automechanic")
                        .IsRequired();

                    b.Navigation("Driver")
                        .IsRequired();
                });

            modelBuilder.Entity("Global.Vehicle", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("FuelMeasurements");

                    b.Navigation("Maintenances");

                    b.Navigation("MileageMeasurements");

                    b.Navigation("Photos");

                    b.Navigation("PlannedMaintenances");

                    b.Navigation("Refuelings");

                    b.Navigation("Repairs");
                });

            modelBuilder.Entity("Global.VehicleCategory", b =>
                {
                    b.Navigation("VehicleModels");
                });

            modelBuilder.Entity("Global.VehicleModel", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Global.VehicleStatus", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
